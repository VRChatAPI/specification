openapi: 3.0.0
info:
  title: VRChat API Documentation
  version: 1.0.0
  contact:
    name: Unofficial VRChat API Documentation Project
    url: 'https://github.com/VRChatAPI'
    email: me@ruby.js.org
  termsOfService: 'https://vrchat.com/legal/'
  license:
    url: 'https://github.com/vrchatapi/specification/blob/master/LICENSE'
    name: GNU Affero General Public License v3.0
  description: |-
    ![VRChat API Banner](https://raw.githubusercontent.com/vrchatapi/vrchatapi.github.io/master/assets/apibanner.png)

    # VRChat API Documentation
    This project is an [OPEN Open Source Project](http://openopensource.org)

    Individuals making significant and valuable contributions are given
    commit-access to the project to contribute as they see fit. This project
    is more like an open wiki than a standard guarded open source project.

    ## Disclaimer

    This is the official response of the VRChat Team (from Tupper more specifically) on the usage of the VRChat API.

    > **Use of the API using applications other than the approved methods (website, VRChat application) are not officially supported. You may use the API for your own application, but keep these guidelines in mind:**
    > * We do not provide documentation or support for the API.
    > * Do not make queries to the API more than once per 60 seconds.
    > * Abuse of the API may result in account termination.
    > * Access to API endpoints may break at any given time, with no warning.

    As stated, this documentation was not created with the help of the official VRChat team. Therefore this documentation is not an official documentation of the VRChat API and may not be always up to date with the latest versions. If you find that a page or endpoint is not longer valid please create an issue and tell us so we can fix it.

    ## Get in touch with us!

    [https://discord.gg/qjZE9C9fkB#vrchat-api](https://discord.gg/qjZE9C9fkB)
servers:
  - url: 'https://api.vrchat.cloud/api/1'
paths:
  /auth:
    get:
      summary: Verify Auth Token
      tags:
        - authentication
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  token:
                    type: string
                    minLength: 1
                required:
                  - ok
                  - token
          headers: {}
        '401':
          $ref: '#/components/responses/MissingCredentials'
      operationId: verifyAuthToken
      parameters: []
      description: Verify whether the currently provided Auth Token is valid.
      security:
        - apiKeyCookie: []
          authCookie: []
  /logout:
    put:
      summary: Logout
      operationId: logout
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: object
                    required:
                      - message
                      - status_code
                    properties:
                      message:
                        type: string
                        minLength: 1
                        readOnly: true
                      status_code:
                        type: number
                        enum:
                          - 200
                        default: 200
                        readOnly: true
                required:
                  - success
              examples:
                Logout Success:
                  value:
                    success:
                      message: Ok!
                      status_code: 200
        '401':
          $ref: '#/components/responses/MissingCredentials'
      description: Invalidates the auth cookie.
      security:
        - apiKeyCookie: []
        - authCookie: []
      tags:
        - authentication
  /auth/user:
    get:
      summary: Login and/or Get Current User Info
      tags:
        - authentication
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./openapi/components/schemas/CurrentUser.yaml
        '401':
          $ref: '#/components/responses/MissingCredentials'
      operationId: getCurrentUser
      description: |-
        Login and/or Get user data from your VRChat account.

        If `Authorization` header is present then a new login session will be generated, and a new `auth` cookie is returned.

        **WARNING: Session Limit:** Each authentication with login credentials counts as a separate session, out of which you have a limited amount. Make sure to save and reuse the `auth` cookie whenever you can, and avoid sending the Authorization header unless strictly neccesary. While the exact number of simultaneous open sessions is secret, expect to **very fast** run into the rate-limit and be temporarily blocked from making new sessions until the old ones expire.
      parameters: []
      security:
        - apiKeyQuery: []
          authHeader: []
  /auth/twofactorauth/totp/verify:
    parameters: []
    post:
      summary: Verify 2FA code
      operationId: verify2FA
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  verified:
                    type: boolean
                required:
                  - verified
        '401':
          $ref: '#/components/responses/MissingCredentials'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
              required:
                - code
            examples: {}
      description: Finishes the login sequence with a normal 2FA-generated code for accounts with 2FA-protection enabled.
      tags:
        - authentication
      security:
        - apiKeyCookie: []
          authCookie: []
      parameters: []
  /auth/twofactorauth/otp/verify:
    parameters: []
    post:
      summary: Verify 2FA code with Recovery code
      operationId: verifyRecoveryCode
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  verified:
                    type: boolean
                required:
                  - verified
        '401':
          $ref: '#/components/responses/MissingCredentials'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
              required:
                - code
            examples: {}
      description: Finishes the login sequence with an OTP (One Time Password) recovery code for accounts with 2FA-protection enabled.
      tags:
        - authentication
      security:
        - apiKeyCookie: []
          authCookie: []
  '/user/{userId}/delete':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    put:
      summary: Delete User
      operationId: deleteUserById
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./openapi/components/schemas/CurrentUser.yaml
        '401':
          $ref: '#/components/responses/MissingCredentials'
      tags:
        - authentication
      description: |-
        Deletes the account with given ID. Normal users only have permission to delete their own account. Account deletion is 14 days from this request, and will be cancelled if you do an authenticated request with the account afterwards.

        **VRC+ NOTE:** Despite the 14-days cooldown, any VRC+ subscription will be cancelled **immediately**.

        **METHOD NOTE:** Despite this being a Delete action, the method type required is PUT.
      security:
        - apiKeyCookie: []
          authCookie: []
  /users:
    get:
      summary: Search All Users
      tags:
        - users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./openapi/components/schemas/LimitedUser.yaml
        '401':
          $ref: '#/components/responses/MissingCredentials'
      operationId: searchUsers
      security:
        - apiKeyCookie: []
          authCookie: []
      parameters:
        - schema:
            type: string
            minLength: 1
          in: query
          name: search
          description: Username to search for
          required: true
        - schema:
            type: string
          in: query
          name: developerType
          description: 'Active user by developer type, none for normal users and internal for moderators'
        - schema:
            type: integer
            maximum: 100
            minimum: 0
          in: query
          name: 'n'
          description: How many users to return
        - schema:
            type: integer
          in: query
          name: offset
          description: How many users to skip
      description: Search and list any users by text query
    parameters: []
  '/users/{username}/name':
    parameters:
      - schema:
          type: string
        name: username
        in: path
        required: true
    get:
      summary: Get User by Username
      tags:
        - users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./openapi/components/schemas/User.yaml
        '401':
          $ref: '#/components/responses/MissingCredentials'
      operationId: getUserByName
      security:
        - apiKeyCookie: []
          authCookie: []
      description: Get public user information about a specific user using their name.
  '/users/{userId}':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    get:
      summary: Get User by ID
      tags:
        - users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./openapi/components/schemas/User.yaml
        '401':
          $ref: '#/components/responses/MissingCredentials'
      operationId: getUser
      security:
        - apiKeyCookie: []
          authCookie: []
      description: Get public user information about a specific user using their ID.
    put:
      summary: Update User Info
      operationId: updateUser
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./openapi/components/schemas/CurrentUser.yaml
      description: Update a users information such as the email and birthday.
      security:
        - apiKeyCookie: []
          authCookie: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                birthday:
                  $ref: ./openapi/components/schemas/Date.yaml
                acceptedTOSVersion:
                  type: number
                tags:
                  type: array
                  items:
                    $ref: ./openapi/components/schemas/Tag.yaml
                status:
                  $ref: ./openapi/components/schemas/UserStatus.yaml
                statusDescription:
                  type: string
                bio:
                  type: string
                  minLength: 0
                bioLinks:
                  type: array
                  items:
                    type: string
      tags:
        - users
  /users/active:
    get:
      summary: Search Active Users
      tags:
        - users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./openapi/components/schemas/LimitedUser.yaml
        '403':
          $ref: '#/components/responses/InvalidAdminCredentials'
      operationId: searchActiveUsers
      security:
        - apiKeyCookie: []
          authCookie: []
      parameters:
        - schema:
            type: string
          in: query
          name: search
          required: true
          description: Username to search for
        - schema:
            type: string
          in: query
          name: developerType
          description: 'Active user by developer type, none for normal users and internal for moderators'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/number'
      description: |-
        Search and list any Active users by text query.

        **Has been locked down and now always respond with "Invalid Admin Credentials".**
      deprecated: true
  /health:
    get:
      summary: Check API Health
      tags:
        - system
      operationId: getHealth
      description: 'Gets the overall health status, the server name, and the current build version tag of the API.'
      security: []
      responses:
        '200':
          $ref: '#/components/responses/APIHealth'
  /config:
    get:
      summary: Fetch API Configuration
      tags:
        - system
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./openapi/components/schemas/Config.yaml
              examples: {}
      operationId: getConfig
      description: |-
        API config contains configuration that the clients needs to work properly.

        Currently the most important value here is `clientApiKey` which is used for all other API endpoints.
      security: []
  /visits:
    get:
      summary: Current Online Users
      tags:
        - system
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: integer
                description: Number of online users
                example: 12345
                minimum: 0
                readOnly: true
      operationId: getCurrentOnlineUsers
      security: []
      description: |-
        Returns in plain format the number of currently online users.

        **NOTE:** The response type is not of JSON, but is an integer in plain ASCII format.
  /time:
    get:
      summary: Current System Time
      tags:
        - system
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: ./openapi/components/schemas/DateTime.yaml
      operationId: getSystemTime
      description: |-
        Returns in plain format the current time of the API server.

        **NOTE:** The response type is not of JSON, but is a string in plain ASCII format.
      security: []
  /auth/user/friends:
    get:
      summary: List Friends
      tags:
        - friends
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./openapi/components/schemas/LimitedUser.yaml
        '401':
          $ref: '#/components/responses/MissingCredentials'
      operationId: getFriends
      security:
        - apiKeyCookie: []
          authCookie: []
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/number'
      description: List information about friends.
  '/user/{userId}/friendStatus':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    get:
      summary: Check Friend Status
      tags:
        - friends
      responses:
        '200':
          $ref: '#/components/responses/FriendStatus'
        '401':
          $ref: '#/components/responses/MissingCredentials'
      operationId: getFriendStatus
      security:
        - apiKeyCookie: []
          authCookie: []
      description: 'Retrieve if the user is currently a friend with a given user, if they have an outgoing friend request, and if they have an incoming friend request. The proper way to receive and accept friend request is by checking if the user has an incoming `Notification` of type `friendRequest`, and then accepting that notification.'
  '/user/{userId}/friendRequest':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    post:
      summary: Send Friend Request
      tags:
        - friends
      operationId: friend
      description: Send a friend request to another user.
      security:
        - apiKeyCookie: []
          authCookie: []
      responses:
        '200':
          $ref: '#/components/responses/Notification'
        '401':
          $ref: '#/components/responses/MissingCredentials'
        '404':
          $ref: '#/components/responses/UserDoesntExistError'
    delete:
      summary: Delete Friend Request
      tags:
        - friends
      operationId: deleteFriendRequest
      description: 'Deletes an outgoing pending friend request to another user. To delete an incoming friend request, use the `deleteNotification` endpoint instead.'
      security:
        - apiKeyCookie: []
          authCookie: []
      responses:
        '200':
          $ref: '#/components/responses/DeleteFriendRequestSuccess'
        '401':
          $ref: '#/components/responses/MissingCredentials'
        '404':
          $ref: '#/components/responses/DeleteFriendRequestError'
  '/auth/user/friends/{userId}':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    delete:
      summary: Unfriend
      operationId: unfriend
      responses:
        '200':
          $ref: '#/components/responses/UnfriendSuccess'
        '400':
          $ref: '#/components/responses/NotFriendsError'
        '401':
          $ref: '#/components/responses/MissingCredentials'
      description: Unfriend a user by ID.
      security:
        - apiKeyCookie: []
          authCookie: []
      tags:
        - friends
  /auth/user/notifications:
    get:
      summary: List Notifications
      tags:
        - notifications
      responses:
        '200':
          $ref: '#/components/responses/NotificationList'
        '401':
          $ref: '#/components/responses/MissingCredentials'
      operationId: getNotifications
      security:
        - apiKeyCookie: []
          authCookie: []
      description: Retrieve all of the current user's notifications.
      parameters:
        - schema:
            type: string
          in: query
          name: type
          description: Only send notifications of this type (can use `all` for all).
        - schema:
            type: boolean
            default: false
          in: query
          name: sent
          description: Return notifications sent by the user. Must be false or omitted.
          deprecated: true
        - schema:
            type: string
            example: five_minutes_ago
          in: query
          name: after
          description: Only return notifications sent after this Date
  '/auth/user/notifications/{notificationId}/see':
    parameters:
      - schema:
          type: string
        name: notificationId
        in: path
        required: true
    put:
      summary: Mark As Read
      operationId: markNotificationAsRead
      responses:
        '200':
          $ref: '#/components/responses/Notification'
        '401':
          $ref: '#/components/responses/MissingCredentials'
      security:
        - apiKeyCookie: []
          authCookie: []
      description: Mark a notification as seen.
      tags:
        - notifications
  '/auth/user/notifications/{notificationId}/hide':
    parameters:
      - schema:
          type: string
        name: notificationId
        in: path
        required: true
    put:
      summary: Delete Notification
      operationId: deleteNotification
      responses:
        '200':
          $ref: '#/components/responses/Notification'
        '401':
          $ref: '#/components/responses/MissingCredentials'
      security:
        - apiKeyCookie: []
          authCookie: []
      description: Delete a notification.
      tags:
        - notifications
  '/auth/user/notifications/{notificationId}/accept':
    parameters:
      - schema:
          type: string
        name: notificationId
        in: path
        required: true
    put:
      summary: Accept Friend Request
      operationId: acceptFriendRequest
      responses:
        '200':
          $ref: '#/components/responses/FriendSuccess'
        '401':
          $ref: '#/components/responses/MissingCredentials'
        '404':
          $ref: '#/components/responses/AcceptFriendRequestError'
      security:
        - apiKeyCookie: []
          authCookie: []
      description: Accept a friend request by notification `frq_` ID. Friend requests can be found using the NotificationsAPI `getNotifications` by filtering of type `friendRequest`.
      tags:
        - notifications
  /auth/user/notifications/clear:
    put:
      summary: Clear All Notifications
      operationId: clearNotifications
      responses:
        '200':
          $ref: '#/components/responses/ClearNotificationsSuccess'
        '401':
          $ref: '#/components/responses/MissingCredentials'
      security:
        - apiKeyCookie: []
          authCookie: []
      description: Clear **all** notifications.
      tags:
        - notifications
  /files:
    get:
      summary: Your GET endpoint
      responses:
        '200':
          $ref: '#/components/responses/FileList'
      operationId: getFiles
      description: Returns a list of files
      parameters:
        - schema:
            type: string
            minLength: 1
          in: query
          name: tag
          description: 'Tag, for example "icon" or "gallery", not included by default.'
        - schema:
            type: string
          in: query
          name: userId
          deprecated: true
          description: 'UserID, will always generate a 500 permission error.'
        - $ref: '#/components/parameters/number'
        - $ref: '#/components/parameters/offset'
      tags:
        - files
  /file:
    post:
      summary: Create File
      tags:
        - files
      responses:
        '200':
          $ref: '#/components/responses/File'
      operationId: createFile
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                name:
                  type: string
                  minLength: 0
                mimeType:
                  $ref: ./openapi/components/schemas/MIMEType.yaml
                extension:
                  type: string
                  minLength: 1
                tags:
                  type: array
                  items:
                    $ref: ./openapi/components/schemas/Tag.yaml
              required:
                - name
                - mimeType
                - extension
      description: Creates a new File object
  '/file/{fileId}':
    parameters:
      - schema:
          type: string
        name: fileId
        in: path
        required: true
    get:
      summary: Show File Information
      operationId: getFile
      tags:
        - files
      responses:
        '200':
          $ref: '#/components/responses/FileList'
        '404':
          $ref: '#/components/responses/FileNotFoundError'
      description: 'Shows general information about the "File" object. Each File can have several "Version"''s, and each Version can have multiple real files or "Data" blobs.'
    delete:
      summary: Delete File
      operationId: deleteFile
      responses:
        '200':
          $ref: '#/components/responses/FileDeletedSuccess'
        '404':
          $ref: '#/components/responses/FileDeletedError'
      tags:
        - files
      description: Deletes a File object.
components:
  schemas: {}
  securitySchemes:
    apiKeyQuery:
      name: apiKey
      type: apiKey
      in: query
      description: API Key via Query
    apiKeyCookie:
      name: apiKey
      type: apiKey
      in: cookie
      description: API Key via Cookie
    authHeader:
      type: http
      scheme: basic
      description: Auth token via Header
    authCookie:
      name: auth
      type: apiKey
      in: cookie
      description: Auth Token via Cookie
  responses:
    MissingCredentials:
      description: Error response due to missing apiKey or auth cookie.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                $ref: ./openapi/components/schemas/Error.yaml
            required:
              - error
          examples:
            Missing Credentials Example:
              value:
                error:
                  message: '"Missing Credentials"'
                  status_code: 401
    InvalidAdminCredentials:
      description: Error response due to missing Administrator credentials.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                $ref: ./openapi/components/schemas/Error.yaml
            required:
              - error
          examples:
            Invalid Admin Credentials Example:
              value:
                error:
                  message: '"Invalid Admin Credentials"'
                  status_code: 403
    APIHealth:
      description: API's Health
      content:
        application/json:
          schema:
            type: object
            properties:
              ok:
                type: boolean
              serverName:
                type: string
                minLength: 1
              buildVersionTag:
                type: string
                minLength: 1
            required:
              - ok
              - serverName
              - buildVersionTag
          examples:
            Example Response:
              value:
                ok: true
                serverName: prod-api-green-marsh-dgt
                buildVersionTag: master-build-2021-06-24-fred-drakeshoot
    AcceptFriendRequestError:
      description: Error response when trying to accept a non-existent friend request.
      content:
        application/json:
          schema:
            $ref: ./openapi/components/schemas/Error.yaml
          examples:
            404 Accept Friend Request:
              value:
                error:
                  message: that friend request could not be found
                  status_code: 404
    DeleteFriendRequestError:
      description: Error response when trying to delete a non-existent friend-request.
      content:
        application/json:
          schema:
            $ref: ./openapi/components/schemas/Error.yaml
          examples:
            404 Delete Friend Request:
              value:
                error:
                  message: that friend request could not be found
                  status_code: 404
    NotFriendsError:
      description: Error response when trying to unfriend someone who is not a friend.
      content:
        application/json:
          schema:
            $ref: ./openapi/components/schemas/Error.yaml
          examples:
            400 Not Friends Response:
              value:
                error:
                  message: These users are not friends
                  status_code: 400
    UserDoesntExistError:
      description: Error response when trying to send a friend request to a user which doesn't exist.
      content:
        application/json:
          schema:
            $ref: ./openapi/components/schemas/Error.yaml
          examples:
            404 User Doesn't Exist Response:
              value:
                error:
                  message: user doesn't existǃ
                  status_code: 404
    ClearNotificationsSuccess:
      description: Successful response after clearing all notifications.
      content:
        application/json:
          schema:
            $ref: ./openapi/components/schemas/Success.yaml
          examples:
            Unfriend Success:
              value:
                success:
                  message: Ok
                  status_code: 200
    FriendSuccess:
      description: Successful response after friending a user.
      content:
        application/json:
          schema:
            $ref: ./openapi/components/schemas/Success.yaml
          examples:
            Unfriend Success:
              value:
                success:
                  message: Ok
                  status_code: 200
    UnfriendSuccess:
      description: Successful response after unfriending a user.
      content:
        application/json:
          schema:
            $ref: ./openapi/components/schemas/Success.yaml
          examples:
            Unfriend Success:
              value:
                success:
                  message: Friendship destroyed
                  status_code: 200
    DeleteFriendRequestSuccess:
      description: Successful response after cancelling a friend request.
      content:
        application/json:
          schema:
            $ref: ./openapi/components/schemas/Success.yaml
          examples:
            Deleted Friend Request:
              value:
                success:
                  message: Friendship request deleted
                  status_code: 200
    Notification:
      description: Returns a single Notifcation object.
      content:
        application/json:
          schema:
            $ref: ./openapi/components/schemas/Notification.yaml
          examples:
            Example Friend Request Response:
              value:
                id: frq_00000000-0000-0000-0000-000000000000
                senderUserId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                senderUsername: tupper
                type: friendRequest
                message: ''
                details: '{}'
                seen: false
                created_at: '2021-01-01T00:00:00.000Z'
    FriendStatus:
      description: Friend Status
      content:
        application/json:
          schema:
            type: object
            properties:
              isFriend:
                type: boolean
                default: false
              outgoingRequest:
                type: boolean
                default: false
              incomingRequest:
                type: boolean
                default: false
            required:
              - isFriend
              - outgoingRequest
              - incomingRequest
          examples:
            Example Response:
              value:
                isFriend: false
                outgoingRequest: false
                incomingRequest: false
    NotificationList:
      description: Returns a list of Notifcation objects.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: ./openapi/components/schemas/Notification.yaml
    FileList:
      description: Returns a list of File objects.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: ./openapi/components/schemas/File.yaml
    File:
      description: Returns a single File object.
      content:
        application/json:
          schema:
            $ref: ./openapi/components/schemas/File.yaml
    FileDeletedSuccess:
      description: Successful response after deleting a File.
      content:
        application/json:
          schema:
            $ref: ./openapi/components/schemas/Success.yaml
          examples:
            File Deleted Success:
              value:
                success:
                  message: File deleted
                  status_code: 200
    FileDeletedError:
      description: Error response when trying to delete a non-existent file.
      content:
        application/json:
          schema:
            $ref: ./openapi/components/schemas/Error.yaml
          examples:
            File Deleted Error:
              value:
                error:
                  message: File 'file_ce35d830-e20a-4df0-a6d4-5aaef4508044' not found
                  status_code: 404
    FileNotFoundError:
      description: Error response when trying to show information about a non-existent file.
      content:
        application/json:
          schema:
            $ref: ./openapi/components/schemas/Error.yaml
          examples:
            404 File Not Found:
              value:
                error:
                  message: File 'file_ce35d830-e20a-4df0-a6d4-5aaef4508044' not found
                  status_code: 404
  examples: {}
  parameters:
    number:
      name: 'n'
      in: query
      required: false
      schema:
        type: integer
        maximum: 100
        minimum: 1
        default: 100
      description: Integer number of results
    offset:
      name: offset
      in: query
      required: false
      schema:
        type: integer
        minimum: 0
      description: Offset of where search results start
tags:
  - name: authentication
  - name: users
  - name: friends
  - name: notifications
  - name: files
  - name: system
