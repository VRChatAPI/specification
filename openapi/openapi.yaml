openapi: 3.0.0
info:
  title: VRChat API Documentation
  version: 1.0.0
  contact:
    name: Unofficial VRChat API Documentation Project
    url: 'https://github.com/VRChatAPI'
    email: me@ruby.js.org
  termsOfService: 'https://vrchat.com/legal/'
  license:
    url: 'https://github.com/vrchatapi/specification/blob/master/LICENSE'
    name: The MIT License (MIT)
  description: |-
    ![VRChat API Banner](https://vrchatapi.github.io/assets/img/api_banner_1500x400.png)

    # VRChat API Documentation
    This project is an [OPEN Open Source Project](https://openopensource.org)

    Individuals making significant and valuable contributions are given
    commit-access to the project to contribute as they see fit. This project
    is more like an open wiki than a standard guarded open source project.

    ## Disclaimer

    This is the official response of the VRChat Team (from Tupper more specifically) on the usage of the VRChat API.

    > **Use of the API using applications other than the approved methods (website, VRChat application) are not officially supported. You may use the API for your own application, but keep these guidelines in mind:**
    > * We do not provide documentation or support for the API.
    > * Do not make queries to the API more than once per 60 seconds.
    > * Abuse of the API may result in account termination.
    > * Access to API endpoints may break at any given time, with no warning.

    As stated, this documentation was not created with the help of the official VRChat team. Therefore this documentation is not an official documentation of the VRChat API and may not be always up to date with the latest versions. If you find that a page or endpoint is not longer valid please create an issue and tell us so we can fix it.

    ## Get in touch with us!

    [https://discord.gg/qjZE9C9fkB#vrchat-api](https://discord.gg/qjZE9C9fkB)
servers:
  - url: 'https://api.vrchat.cloud/api/1'
paths:
  /auth:
    get:
      summary: Verify Auth Token
      tags:
        - authentication
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  token:
                    type: string
                    minLength: 1
                required:
                  - ok
                  - token
          headers: {}
        '401':
          $ref: '#/components/responses/MissingCredentials'
      operationId: verifyAuthToken
      parameters: []
      description: Verify whether the currently provided Auth Token is valid.
      security:
        - apiKeyCookie: []
          authCookie: []
  /logout:
    put:
      summary: Logout
      operationId: logout
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./components/schemas/Success.yaml
              examples:
                Logout Success:
                  value:
                    success:
                      message: Ok!
                      status_code: 200
        '401':
          $ref: '#/components/responses/MissingCredentials'
      description: Invalidates the auth cookie.
      security:
        - apiKeyCookie: []
        - authCookie: []
      tags:
        - authentication
  /auth/user:
    get:
      summary: Login and/or Get Current User Info
      tags:
        - authentication
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./components/schemas/CurrentUser.yaml
          headers:
            Set-Cookie:
              schema:
                type: string
                example: 'auth=authcookie_00000000-0000-0000-0000-000000000000; Expires=Tue, 01 Jan 2030 00:00:00 GMT; Path=/; HttpOnly'
              description: Authenticating returns an `auth` cookie.
        '401':
          $ref: '#/components/responses/MissingCredentials'
      operationId: getCurrentUser
      description: |-
        Login and/or Get user data from your VRChat account.

        If `Authorization` header is present then a new login session will be generated, and a new `auth` cookie is returned.

        **WARNING: Session Limit:** Each authentication with login credentials counts as a separate session, out of which you have a limited amount. Make sure to save and reuse the `auth` cookie whenever you can, and avoid sending the Authorization header unless strictly neccesary. While the exact number of simultaneous open sessions is secret, expect to **very fast** run into the rate-limit and be temporarily blocked from making new sessions until the old ones expire.
      parameters: []
      security:
        - authHeader: []
        - authHeader: []
          twoFactorAuthCookie: []
        - authCookie: []
  /auth/twofactorauth/totp/verify:
    parameters: []
    post:
      summary: Verify 2FA code
      operationId: verify2FA
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  verified:
                    type: boolean
                required:
                  - verified
          headers:
            Set-Cookie:
              schema:
                type: string
                example: 'twoFactorAuth=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx; Expires=Tue, 01 Jan 2030 00:00:00 GMT; Path=/; HttpOnly'
              description: 'Provides a `twoFactorAuth` cookie, which can be used to bypasses the 2FA requirement for future logins on the same device.'
        '401':
          $ref: '#/components/responses/MissingCredentials'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
              required:
                - code
            examples: {}
      description: Finishes the login sequence with a normal 2FA-generated code for accounts with 2FA-protection enabled.
      tags:
        - authentication
      security:
        - authCookie: []
      parameters: []
  /auth/twofactorauth/otp/verify:
    parameters: []
    post:
      summary: Verify 2FA code with Recovery code
      operationId: verifyRecoveryCode
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  verified:
                    type: boolean
                required:
                  - verified
          headers:
            Set-Cookie:
              schema:
                type: string
                example: 'twoFactorAuth=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx; Expires=Tue, 01 Jan 2030 00:00:00 GMT; Path=/; HttpOnly'
              description: 'Provides a `twoFactorAuth` cookie, which can be used to bypasses the 2FA requirement for future logins on the same device.'
        '401':
          $ref: '#/components/responses/MissingCredentials'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
              required:
                - code
            examples: {}
      description: Finishes the login sequence with an OTP (One Time Password) recovery code for accounts with 2FA-protection enabled.
      tags:
        - authentication
      security:
        - authCookie: []
  '/user/{userId}/delete':
    parameters:
      - $ref: '#/components/parameters/userId'
    put:
      summary: Delete User
      operationId: deleteUserById
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./components/schemas/CurrentUser.yaml
        '401':
          $ref: '#/components/responses/MissingCredentials'
      tags:
        - authentication
      description: |-
        Deletes the account with given ID. Normal users only have permission to delete their own account. Account deletion is 14 days from this request, and will be cancelled if you do an authenticated request with the account afterwards.

        **VRC+ NOTE:** Despite the 14-days cooldown, any VRC+ subscription will be cancelled **immediately**.

        **METHOD NOTE:** Despite this being a Delete action, the method type required is PUT.
      security:
        - apiKeyCookie: []
          authCookie: []
  /users:
    get:
      summary: Search All Users
      tags:
        - users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./components/schemas/LimitedUser.yaml
        '400':
          $ref: ./components/responses/Users400Error.yaml
        '401':
          $ref: '#/components/responses/MissingCredentials'
      operationId: searchUsers
      security:
        - apiKeyCookie: []
          authCookie: []
      parameters:
        - schema:
            type: string
            minLength: 0
          in: query
          name: search
          description: Searches by `displayName`. Will return empty array if search query is empty or missing.
        - schema:
            type: string
          in: query
          name: developerType
          description: 'Active user by developer type, none for normal users and internal for moderators'
        - $ref: '#/components/parameters/number'
        - $ref: '#/components/parameters/offset'
      description: Search and list any users by text query
    parameters: []
  '/users/{username}/name':
    parameters:
      - schema:
          type: string
        name: username
        in: path
        required: true
    get:
      summary: Get User by Username
      tags:
        - users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./components/schemas/User.yaml
        '401':
          $ref: '#/components/responses/MissingCredentials'
      operationId: getUserByName
      security:
        - apiKeyCookie: []
          authCookie: []
      description: Get public user information about a specific user using their name.
  '/users/{userId}':
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      summary: Get User by ID
      tags:
        - users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./components/schemas/User.yaml
        '401':
          $ref: '#/components/responses/MissingCredentials'
      operationId: getUser
      security:
        - apiKeyCookie: []
          authCookie: []
      description: Get public user information about a specific user using their ID.
    put:
      summary: Update User Info
      operationId: updateUser
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./components/schemas/CurrentUser.yaml
      description: Update a users information such as the email and birthday.
      security:
        - apiKeyCookie: []
          authCookie: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                birthday:
                  type: string
                  format: date
                acceptedTOSVersion:
                  type: number
                tags:
                  type: array
                  items:
                    $ref: ./components/schemas/Tag.yaml
                status:
                  $ref: ./components/schemas/UserStatus.yaml
                statusDescription:
                  type: string
                bio:
                  type: string
                  minLength: 0
                bioLinks:
                  type: array
                  items:
                    type: string
                userIcon:
                  type: string
                  description: MUST be a valid VRChat /file/ url.
                  example: 'https://api.vrchat.cloud/api/1/file/file_76dc2964-0ce8-41df-b2e7-8edf994fee31/1'
                  minLength: 0
      tags:
        - users
  /users/active:
    get:
      summary: Search Active Users
      tags:
        - users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./components/schemas/LimitedUser.yaml
        '403':
          $ref: '#/components/responses/InvalidAdminCredentials'
      operationId: searchActiveUsers
      security:
        - apiKeyCookie: []
          authCookie: []
      parameters:
        - schema:
            type: string
          in: query
          name: search
          required: true
          description: Username to search for
        - schema:
            type: string
          in: query
          name: developerType
          description: 'Active user by developer type, none for normal users and internal for moderators'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/number'
      description: |-
        Search and list any Active users by text query.

        **Has been locked down and now always respond with "Invalid Admin Credentials".**
      deprecated: true
  /health:
    get:
      summary: Check API Health
      tags:
        - system
      operationId: getHealth
      description: 'Gets the overall health status, the server name, and the current build version tag of the API.'
      security: []
      responses:
        '200':
          $ref: '#/components/responses/APIHealth'
  /config:
    get:
      summary: Fetch API Config
      tags:
        - system
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./components/schemas/Config.yaml
          headers:
            Set-Cookie:
              schema:
                type: string
                example: apiKey=JlE5Jldo5Jibnk5O5hTx6XVqsJu4WJ26; Path=/
      operationId: getConfig
      description: |-
        API config contains configuration that the clients needs to work properly.

        Currently the most important value here is `clientApiKey` which is used for all other API endpoints.
      security: []
  /visits:
    get:
      summary: Current Online Users
      tags:
        - system
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: integer
                description: Number of online users
                example: 12345
                minimum: 0
                readOnly: true
      operationId: getCurrentOnlineUsers
      security: []
      description: |-
        Returns in plain format the number of currently online users.

        **NOTE:** The response type is not of JSON, but is an integer in plain ASCII format.
  /time:
    get:
      summary: Current System Time
      tags:
        - system
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                format: date-time
      operationId: getSystemTime
      description: |-
        Returns in plain format the current time of the API server.

        **NOTE:** The response type is not of JSON, but is a string in plain ASCII format.
      security: []
  /auth/user/friends:
    get:
      summary: List Friends
      tags:
        - friends
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./components/schemas/LimitedUser.yaml
        '401':
          $ref: '#/components/responses/MissingCredentials'
      operationId: getFriends
      security:
        - apiKeyCookie: []
          authCookie: []
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/number'
        - $ref: '#/components/parameters/offline'
      description: List information about friends.
  '/user/{userId}/friendStatus':
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      summary: Check Friend Status
      tags:
        - friends
      responses:
        '200':
          $ref: '#/components/responses/FriendStatus'
        '401':
          $ref: '#/components/responses/MissingCredentials'
      operationId: getFriendStatus
      security:
        - apiKeyCookie: []
          authCookie: []
      description: 'Retrieve if the user is currently a friend with a given user, if they have an outgoing friend request, and if they have an incoming friend request. The proper way to receive and accept friend request is by checking if the user has an incoming `Notification` of type `friendRequest`, and then accepting that notification.'
  '/user/{userId}/friendRequest':
    parameters:
      - $ref: '#/components/parameters/userId'
    post:
      summary: Send Friend Request
      tags:
        - friends
      operationId: friend
      description: Send a friend request to another user.
      security:
        - apiKeyCookie: []
          authCookie: []
      responses:
        '200':
          $ref: '#/components/responses/Notification'
        '401':
          $ref: '#/components/responses/MissingCredentials'
        '404':
          $ref: '#/components/responses/UserDoesntExistError'
    delete:
      summary: Delete Friend Request
      tags:
        - friends
      operationId: deleteFriendRequest
      description: 'Deletes an outgoing pending friend request to another user. To delete an incoming friend request, use the `deleteNotification` endpoint instead.'
      security:
        - apiKeyCookie: []
          authCookie: []
      responses:
        '200':
          $ref: '#/components/responses/DeleteFriendRequestSuccess'
        '401':
          $ref: '#/components/responses/MissingCredentials'
        '404':
          $ref: '#/components/responses/DeleteFriendRequestError'
  '/auth/user/friends/{userId}':
    parameters:
      - $ref: '#/components/parameters/userId'
    delete:
      summary: Unfriend
      operationId: unfriend
      responses:
        '200':
          $ref: '#/components/responses/UnfriendSuccess'
        '400':
          $ref: '#/components/responses/NotFriendsError'
        '401':
          $ref: '#/components/responses/MissingCredentials'
      description: Unfriend a user by ID.
      security:
        - apiKeyCookie: []
          authCookie: []
      tags:
        - friends
  /auth/user/notifications:
    get:
      summary: List Notifications
      tags:
        - notifications
      responses:
        '200':
          $ref: '#/components/responses/NotificationList'
        '401':
          $ref: '#/components/responses/MissingCredentials'
      operationId: getNotifications
      security:
        - apiKeyCookie: []
          authCookie: []
      description: Retrieve all of the current user's notifications.
      parameters:
        - schema:
            type: string
            example: all
          in: query
          name: type
          description: Only send notifications of this type (can use `all` for all).
        - schema:
            type: boolean
          in: query
          name: sent
          description: Return notifications sent by the user. Must be false or omitted.
          deprecated: true
        - schema:
            type: boolean
          in: query
          name: hidden
          description: Whether to return hidden or non-hidden notifications. True only allowed on type `friendRequest`.
        - schema:
            type: string
            example: five_minutes_ago
          in: query
          name: after
          description: Only return notifications sent after this Date. Ignored if type is `friendRequest`.
        - $ref: '#/components/parameters/number'
        - $ref: '#/components/parameters/offset'
  '/auth/user/notifications/{notificationId}/see':
    parameters:
      - schema:
          type: string
        name: notificationId
        in: path
        required: true
    put:
      summary: Mark As Read
      operationId: markNotificationAsRead
      responses:
        '200':
          $ref: '#/components/responses/Notification'
        '401':
          $ref: '#/components/responses/MissingCredentials'
      security:
        - apiKeyCookie: []
          authCookie: []
      description: Mark a notification as seen.
      tags:
        - notifications
  '/auth/user/notifications/{notificationId}/hide':
    parameters:
      - schema:
          type: string
        name: notificationId
        in: path
        required: true
    put:
      summary: Delete Notification
      operationId: deleteNotification
      responses:
        '200':
          $ref: '#/components/responses/Notification'
        '401':
          $ref: '#/components/responses/MissingCredentials'
      security:
        - apiKeyCookie: []
          authCookie: []
      description: Delete a notification.
      tags:
        - notifications
  '/auth/user/notifications/{notificationId}/accept':
    parameters:
      - schema:
          type: string
        name: notificationId
        in: path
        required: true
    put:
      summary: Accept Friend Request
      operationId: acceptFriendRequest
      responses:
        '200':
          $ref: '#/components/responses/FriendSuccess'
        '401':
          $ref: '#/components/responses/MissingCredentials'
        '404':
          $ref: '#/components/responses/AcceptFriendRequestError'
      security:
        - apiKeyCookie: []
          authCookie: []
      description: Accept a friend request by notification `frq_` ID. Friend requests can be found using the NotificationsAPI `getNotifications` by filtering of type `friendRequest`.
      tags:
        - notifications
  /auth/user/notifications/clear:
    put:
      summary: Clear All Notifications
      operationId: clearNotifications
      responses:
        '200':
          $ref: '#/components/responses/ClearNotificationsSuccess'
        '401':
          $ref: '#/components/responses/MissingCredentials'
      security:
        - apiKeyCookie: []
          authCookie: []
      description: Clear **all** notifications.
      tags:
        - notifications
  /files:
    get:
      summary: List Files
      responses:
        '200':
          $ref: '#/components/responses/FileList'
      operationId: getFiles
      security:
        - apiKeyCookie: []
          authCookie: []
      description: Returns a list of files
      parameters:
        - schema:
            type: string
            minLength: 1
          in: query
          name: tag
          description: 'Tag, for example "icon" or "gallery", not included by default.'
        - schema:
            type: string
          in: query
          name: userId
          deprecated: true
          description: 'UserID, will always generate a 500 permission error.'
        - $ref: '#/components/parameters/number'
        - $ref: '#/components/parameters/offset'
      tags:
        - files
  /file:
    post:
      summary: Create File
      tags:
        - files
      responses:
        '200':
          $ref: '#/components/responses/File'
      operationId: createFile
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                name:
                  type: string
                  minLength: 0
                mimeType:
                  $ref: ./components/schemas/MIMEType.yaml
                extension:
                  type: string
                  minLength: 1
                tags:
                  type: array
                  items:
                    $ref: ./components/schemas/Tag.yaml
              required:
                - name
                - mimeType
                - extension
      security:
        - apiKeyCookie: []
          authCookie: []
      description: Creates a new File object
  '/file/{fileId}':
    parameters:
      - $ref: '#/components/parameters/fileId'
    get:
      summary: Show File
      operationId: getFile
      tags:
        - files
      responses:
        '200':
          $ref: '#/components/responses/File'
        '404':
          $ref: '#/components/responses/FileNotFoundError'
      security:
        - apiKeyCookie: []
          authCookie: []
      description: 'Shows general information about the "File" object. Each File can have several "Version"''s, and each Version can have multiple real files or "Data" blobs.'
    delete:
      summary: Delete File
      operationId: deleteFile
      responses:
        '200':
          $ref: '#/components/responses/FileDeletedSuccess'
        '404':
          $ref: '#/components/responses/FileDeletedError'
      tags:
        - files
      security:
        - apiKeyCookie: []
          authCookie: []
      description: Deletes a File object.
    post:
      summary: Create File Version
      operationId: createFileVersion
      responses:
        '200':
          $ref: '#/components/responses/File'
      security:
        - apiKeyCookie: []
          authCookie: []
      description: 'Creates a new FileVersion. Once a Version has been created, proceed to the `/file/{fileId}/{versionId}/file/start` endpoint to start a file upload.'
      tags:
        - files
  '/file/{fileId}/{versionId}':
    parameters:
      - $ref: '#/components/parameters/fileId'
      - $ref: '#/components/parameters/versionId'
    get:
      summary: Download File Version
      tags:
        - files
      responses:
        '200':
          $ref: '#/components/responses/RawFile'
      operationId: downloadFileVersion
      security:
        - apiKeyCookie: []
          authCookie: []
      description: |-
        Downloads the file with the provided version number.

        **Version Note:** Version 0 is always when the file was created. The real data is usually always located in version 1 and up.

        **Extension Note:** Files are not guaranteed to have a file extensions. UnityPackage files tends to have it, images through this endpoint do not. You are responsible for appending file extension from the `extension` field when neccesary.
    delete:
      summary: Delete File Version
      operationId: deleteFileVersion
      responses:
        '200':
          $ref: '#/components/responses/File'
        '400':
          $ref: '#/components/responses/FileVersionDeleteInitialError'
        '500':
          $ref: '#/components/responses/FileVersionDeleteMiddleError'
      security:
        - apiKeyCookie: []
          authCookie: []
      description: Delete a specific version of a file. You can only delete the latest version.
      tags:
        - files
  '/file/{fileId}/{versionId}/{fileType}/status':
    parameters:
      - $ref: '#/components/parameters/fileId'
      - $ref: '#/components/parameters/versionId'
      - $ref: '#/components/parameters/fileType'
    get:
      summary: Check FileData Upload Status
      tags:
        - files
      responses:
        '200':
          $ref: '#/components/responses/FileVersionUploadInfo'
      operationId: getFileDataUploadStatus
      security:
        - apiKeyCookie: []
          authCookie: []
      description: Retrieves the upload status for file upload. Can currently only be accessed when `status` is `waiting`. Trying to access it on a file version already uploaded currently times out.
  '/file/{fileId}/{versionId}/{fileType}/start':
    parameters:
      - $ref: '#/components/parameters/fileId'
      - $ref: '#/components/parameters/versionId'
      - $ref: '#/components/parameters/fileType'
    put:
      summary: Start FileData Upload
      tags:
        - files
      responses:
        '200':
          description: 'See [https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html](AWS REST docs - PUT Object)'
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  url:
                    type: string
                    minLength: 1
                    description: ''
                required:
                  - url
              examples:
                Example Response:
                  value:
                    url: 'https://s3.amazonaws.com/files.vrchat.cloud/Avatar-MyAvatar-Un.file_00000000-0000-0000-0000-000000000000.1.unitypackage?AWSAccessKeyId=XXXXXXXXXXXXXXXXXXXX&Expires=1626028518&Signature=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&partNumber=1&uploadId=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx_xxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxx_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx..xxxxxxxxxxxxxxxxxxxxxxx'
        '400':
          description: Error response when trying to start an upload against a FileVersion that is already marked as  `complete`.
          content:
            application/json:
              schema:
                $ref: ./components/schemas/Error.yaml
              examples:
                Tried To Upload Against Already Finished Version:
                  value:
                    error:
                      message: Cannot upload against a complete version entry․ Create a new version of this file before uploading․
                      status_code: 400
      operationId: startFileDataUpload
      parameters:
        - schema:
            type: integer
            minimum: 0
            example: 1
          in: query
          name: partNumber
          required: true
      security:
        - apiKeyCookie: []
          authCookie: []
      description: |-
        Starts an upload of a specific FilePart. This endpoint will return an AWS URL which you can PUT data to. You need to call this and receive a new AWS API URL for each `partNumber`. Please see AWS's REST documentation on "PUT Object to S3" on how to upload. Once all parts has been uploaded, proceed to `/finish` endpoint.

        **Note:** `nextPartNumber` seems like it is always ignored. Despite it returning 0, first partNumber is always 1.
  '/file/{fileId}/{versionId}/{fileType}/finish':
    parameters:
      - $ref: '#/components/parameters/fileId'
      - $ref: '#/components/parameters/versionId'
      - $ref: '#/components/parameters/fileType'
    put:
      summary: Finish FileData Upload
      tags:
        - files
      responses:
        '200':
          $ref: '#/components/responses/File'
      operationId: finishFileDataUpload
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: ''
              properties:
                etags:
                  type: array
                  description: Array of ETags uploaded.
                  minItems: 1
                  uniqueItems: true
                  items:
                    type: string
                nextPartNumber:
                  type: string
                  minLength: 1
                  default: '0'
                  example: '0'
                  deprecated: true
                  description: 'Always a zero in string form, despite how many parts uploaded.'
                  maxLength: 1
                  pattern: '0'
                maxParts:
                  type: string
                  minLength: 1
                  description: 'Always a zero in string form, despite how many parts uploaded.'
                  deprecated: true
                  default: '0'
                  example: '0'
                  maxLength: 1
                  pattern: '0'
              required:
                - nextPartNumber
                - maxParts
            examples:
              Example Request:
                value:
                  etags:
                    - xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                    - yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
                  nextPartNumber: '0'
                  maxParts: '0'
        description: |-
          Please see documentation on ETag's:
          [https://teppen.io/2018/06/23/aws_s3_etags/](https://teppen.io/2018/06/23/aws_s3_etags/)

          ETag's should NOT be present when uploading a `signature`.
      security:
        - apiKeyCookie: []
          authCookie: []
      description: Finish an upload of a FileData. This will mark it as "complete". After uploading the `file` for Avatars and Worlds you then have to upload a `signature` file.
  /worlds:
    get:
      summary: Search All Worlds
      tags:
        - worlds
      responses:
        '200':
          $ref: '#/components/responses/LimitedWorldList'
        '401':
          $ref: '#/components/responses/MissingCredentials'
      operationId: searchWorlds
      security:
        - apiKeyCookie: []
          authCookie: []
      parameters:
        - $ref: '#/components/parameters/featured'
        - $ref: '#/components/parameters/sortOptions'
        - schema:
            type: string
            enum:
              - me
          in: query
          required: false
          name: user
          description: Set to `me` for searching own worlds.
        - $ref: '#/components/parameters/userIdQuery'
        - $ref: '#/components/parameters/number'
        - $ref: '#/components/parameters/orderOptions'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/tag'
        - $ref: '#/components/parameters/notag'
        - $ref: '#/components/parameters/releaseStatus'
        - $ref: '#/components/parameters/maxUnityVersion'
        - $ref: '#/components/parameters/minUnityVersion'
        - $ref: '#/components/parameters/platform'
      description: Search and list any worlds by query filters.
    post:
      summary: Create World
      operationId: createWorld
      responses:
        '200':
          $ref: '#/components/responses/World'
        '400':
          $ref: ./components/responses/CreateWorldNotAllowedYetError.yaml
        '401':
          $ref: '#/components/responses/MissingCredentials'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                assetUrl:
                  type: string
                  minLength: 1
                assetVersion:
                  type: string
                  minLength: 1
                authorId:
                  $ref: ./components/schemas/UserID.yaml
                authorName:
                  type: string
                  minLength: 1
                capacity:
                  type: integer
                  minimum: 1
                  maximum: 40
                  default: 16
                  example: 16
                description:
                  type: string
                id:
                  $ref: ./components/schemas/WorldID.yaml
                imageUrl:
                  type: string
                  minLength: 1
                name:
                  type: string
                  minLength: 1
                platform:
                  $ref: ./components/schemas/Platform.yaml
                releaseStatus:
                  $ref: ./components/schemas/ReleaseStatus.yaml
                tags:
                  type: array
                  items:
                    $ref: ./components/schemas/Tag.yaml
                unityPackageUrl:
                  type: string
                  minLength: 1
                unityVersion:
                  type: string
                  minLength: 1
                  default: 5.3.4p1
                  example: 2018.4.20f1
              required:
                - assetUrl
                - imageUrl
                - name
        description: ''
      description: 'Create a new world. This endpoint requires `assetUrl` to be a valid File object with `.vrcw` file extension, and `imageUrl` to be a valid File object with an image file extension.'
      tags:
        - worlds
  /worlds/active:
    get:
      summary: List Active Worlds
      tags:
        - worlds
      responses:
        '200':
          $ref: '#/components/responses/LimitedWorldList'
        '401':
          $ref: '#/components/responses/MissingCredentials'
      operationId: getActiveWorlds
      security:
        - apiKeyCookie: []
          authCookie: []
      parameters:
        - $ref: '#/components/parameters/featured'
        - $ref: '#/components/parameters/sortOptions'
        - $ref: '#/components/parameters/number'
        - $ref: '#/components/parameters/orderOptions'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/tag'
        - $ref: '#/components/parameters/notag'
        - $ref: '#/components/parameters/releaseStatus'
        - $ref: '#/components/parameters/maxUnityVersion'
        - $ref: '#/components/parameters/minUnityVersion'
        - $ref: '#/components/parameters/platform'
      description: Search and list currently Active worlds by query filters.
  /worlds/recent:
    get:
      summary: List Recent Worlds
      tags:
        - worlds
      responses:
        '200':
          $ref: '#/components/responses/LimitedWorldList'
        '401':
          $ref: '#/components/responses/MissingCredentials'
        '403':
          $ref: ./components/responses/SeeOtherUserRecentsError.yaml
      operationId: getRecentWorlds
      security:
        - apiKeyCookie: []
          authCookie: []
      parameters:
        - $ref: '#/components/parameters/featured'
        - $ref: '#/components/parameters/sortOptions'
        - $ref: '#/components/parameters/number'
        - $ref: '#/components/parameters/orderOptions'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/tag'
        - $ref: '#/components/parameters/notag'
        - $ref: '#/components/parameters/releaseStatus'
        - $ref: '#/components/parameters/maxUnityVersion'
        - $ref: '#/components/parameters/minUnityVersion'
        - $ref: '#/components/parameters/platform'
        - $ref: '#/components/parameters/userIdAdmin'
      description: Search and list recently visited worlds by query filters.
  /worlds/favorites:
    get:
      summary: List Favorited Worlds
      tags:
        - worlds
      responses:
        '200':
          $ref: '#/components/responses/LimitedWorldList'
        '401':
          $ref: '#/components/responses/MissingCredentials'
        '403':
          $ref: ./components/responses/SeeOtherUserFavoritesError.yaml
      operationId: getFavoritedWorlds
      security:
        - apiKeyCookie: []
          authCookie: []
      parameters:
        - $ref: '#/components/parameters/featured'
        - $ref: '#/components/parameters/sortOptions'
        - $ref: '#/components/parameters/number'
        - $ref: '#/components/parameters/orderOptions'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/tag'
        - $ref: '#/components/parameters/notag'
        - $ref: '#/components/parameters/releaseStatus'
        - $ref: '#/components/parameters/maxUnityVersion'
        - $ref: '#/components/parameters/minUnityVersion'
        - $ref: '#/components/parameters/platform'
        - $ref: '#/components/parameters/userIdAdmin'
      description: Search and list favorited worlds by query filters.
  '/worlds/{worldId}':
    parameters:
      - $ref: '#/components/parameters/worldId'
    get:
      summary: Get World by ID
      tags:
        - worlds
      operationId: getWorld
      responses:
        '200':
          $ref: '#/components/responses/World'
        '404':
          $ref: ./components/responses/WorldNotFoundError.yaml
      description: Get information about a specific World.
    put:
      summary: Update World
      operationId: updateWorld
      security:
        - apiKeyCookie: []
          authCookie: []
      responses:
        '200':
          $ref: '#/components/responses/World'
        '401':
          $ref: '#/components/responses/MissingCredentials'
        '404':
          $ref: ./components/responses/WorldNotFoundError.yaml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                assetUrl:
                  type: string
                  minLength: 1
                assetVersion:
                  type: string
                  minLength: 1
                authorId:
                  $ref: ./components/schemas/UserID.yaml
                authorName:
                  type: string
                  minLength: 1
                capacity:
                  type: integer
                  minimum: 1
                  maximum: 40
                  default: 16
                  example: 16
                description:
                  type: string
                id:
                  $ref: ./components/schemas/WorldID.yaml
                imageUrl:
                  type: string
                  minLength: 1
                name:
                  type: string
                  minLength: 1
                platform:
                  $ref: ./components/schemas/Platform.yaml
                releaseStatus:
                  $ref: ./components/schemas/ReleaseStatus.yaml
                tags:
                  type: array
                  items:
                    $ref: ./components/schemas/Tag.yaml
                unityPackageUrl:
                  type: string
                  minLength: 1
                unityVersion:
                  type: string
                  minLength: 1
                  default: 5.3.4p1
                  example: 2018.4.20f1
      description: Update information about a specific World.
      tags:
        - worlds
    delete:
      summary: Delete World
      operationId: deleteWorld
      security:
        - apiKeyCookie: []
          authCookie: []
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/MissingCredentials'
        '404':
          $ref: ./components/responses/WorldNotFoundError.yaml
      description: 'Delete a world. Notice a world is never fully "deleted", only its ReleaseStatus is set to "hidden" and the linked Files are deleted. The WorldID is permanently reserved.'
      tags:
        - worlds
  '/worlds/{worldId}/{instanceId}':
    parameters:
      - $ref: '#/components/parameters/worldId'
      - $ref: '#/components/parameters/instanceId'
    get:
      summary: Get World Instance
      tags:
        - worlds
      operationId: getWorldInstance
      security:
        - apiKeyCookie: []
          authCookie: []
      description: Returns a worlds instance.
      responses:
        '200':
          $ref: '#/components/responses/Instance'
        '401':
          $ref: '#/components/responses/MissingCredentials'
  '/worlds/{worldId}/metadata':
    parameters:
      - $ref: '#/components/parameters/worldId'
    get:
      summary: Get World Metadata
      tags:
        - worlds
      operationId: getWorldMetadata
      security:
        - apiKeyCookie: []
          authCookie: []
      deprecated: true
      description: Return a worlds custom metadata. This is currently believed to be unused. Metadata can be set with `updateWorld` and can be any arbitrary object.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  id:
                    $ref: ./components/schemas/WorldID.yaml
                  metadata:
                    type: object
                    readOnly: true
                required:
                  - id
                  - metadata
                readOnly: true
        '404':
          $ref: ./components/responses/WorldNotFoundError.yaml
  '/worlds/{worldId}/publish':
    parameters:
      - $ref: '#/components/parameters/worldId'
    get:
      summary: Get World Publish Status
      tags:
        - worlds
      operationId: getWorldPublishStatus
      security:
        - apiKeyCookie: []
          authCookie: []
      description: Returns a worlds publish status.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  canPubilsh:
                    type: boolean
                    default: true
                    readOnly: true
                required:
                  - canPubilsh
                readOnly: true
        '401':
          $ref: '#/components/responses/MissingCredentials'
        '404':
          $ref: ./components/responses/WorldNotFoundError.yaml
    put:
      summary: Publish World
      operationId: publishWorld
      security:
        - apiKeyCookie: []
          authCookie: []
      responses:
        '200':
          description: TODO
        '401':
          $ref: '#/components/responses/MissingCredentials'
        '404':
          $ref: ./components/responses/WorldNotFoundError.yaml
      description: Publish a world. You can only publish one world per week.
      tags:
        - worlds
    delete:
      summary: Unpublish World
      operationId: unpublishWorld
      security:
        - apiKeyCookie: []
          authCookie: []
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/MissingCredentials'
        '404':
          $ref: ./components/responses/WorldNotFoundError.yaml
      description: Unpublish a world.
      tags:
        - worlds
  /favorites:
    get:
      summary: List Favorites
      tags:
        - favorites
      responses:
        '200':
          $ref: '#/components/responses/FavoriteList'
        '401':
          $ref: '#/components/responses/MissingCredentials'
      operationId: getFavorites
      security:
        - apiKeyCookie: []
          authCookie: []
      description: Returns a list of favorites.
      parameters:
        - $ref: '#/components/parameters/number'
        - $ref: '#/components/parameters/offset'
        - schema:
            type: string
          in: query
          name: type
          description: 'The type of favorites to return, FavoriteType.'
        - $ref: '#/components/parameters/tag'
    post:
      summary: Add Favorite
      operationId: addFavorite
      security:
        - apiKeyCookie: []
          authCookie: []
      responses:
        '200':
          $ref: '#/components/responses/Favorite'
        '400':
          $ref: ./components/responses/FavoriteAddAlreadyFavoritedError.yaml
        '403':
          $ref: ./components/responses/FavoriteAddNotFriendsError.yaml
      description: |-
        Add a new favorite.

        Friend groups are named `group_0` through `group_3`. Avatar and World groups are named `avatars1` to `avatar4` and `worlds1` to `worlds4`.

        You cannot add people whom you are not friends with to your friends list. Destroying a friendship removes the person as favorite on both sides.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  $ref: ./components/schemas/FavoriteType.yaml
                favoriteId:
                  type: string
                  description: 'Must be either AvatarID, WorldID or UserID.'
                tags:
                  type: array
                  description: Tags indicate which group this favorite belongs to. Adding multiple groups makes it show up in all. Removing it from one in that case removes it from all.
                  items:
                    $ref: ./components/schemas/Tag.yaml
              required:
                - type
                - favoriteId
                - tags
            examples:
              Example Favorite Friend:
                value:
                  type: friend
                  favoriteId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                  tags:
                    - group_0
              Example Favorite Avatar:
                value:
                  type: avatar
                  favoriteId: avtr_912d66a4-4714-43b8-8407-7de2cafbf55b
                  tags:
                    - avatars1
        description: ''
      tags:
        - favorites
  '/favorites/{favoriteId}':
    get:
      summary: Show Favorite
      tags:
        - favorites
      responses:
        '200':
          $ref: '#/components/responses/Favorite'
        '401':
          $ref: '#/components/responses/MissingCredentials'
        '404':
          $ref: ./components/responses/FavoriteNotFoundError.yaml
      operationId: getFavorite
      security:
        - apiKeyCookie: []
          authCookie: []
      description: Return information about a specific Favorite.
      parameters: []
    parameters:
      - $ref: '#/components/parameters/favoriteId'
    delete:
      summary: Remove Favorite
      operationId: removeFavorite
      security:
        - apiKeyCookie: []
          authCookie: []
      responses:
        '200':
          $ref: ./components/responses/FavoriteRemovedSuccess.yaml
        '401':
          $ref: '#/components/responses/MissingCredentials'
        '404':
          $ref: ./components/responses/FavoriteNotFoundError.yaml
      description: Remove a favorite from your favorites list.
      tags:
        - favorites
  /favorite/groups:
    get:
      summary: List Favorite Groups
      tags:
        - favorites
      responses:
        '200':
          $ref: '#/components/responses/FavoriteGroupList'
        '401':
          $ref: '#/components/responses/MissingCredentials'
      operationId: getFavoriteGroups
      security:
        - apiKeyCookie: []
          authCookie: []
      parameters:
        - $ref: '#/components/parameters/number'
        - $ref: '#/components/parameters/offset'
        - schema:
            type: string
          in: query
          name: ownerId
          description: The owner of whoms favorite groups to return. Must be a UserID.
      description: Return a list of favorite groups owned by a user. Returns the same information as `getFavoriteGroups`.
  '/favorite/group/{favoriteGroupType}/{favoriteGroupName}/{userId}':
    parameters:
      - $ref: '#/components/parameters/favoriteGroupType'
      - $ref: '#/components/parameters/favoriteGroupName'
      - $ref: '#/components/parameters/userId'
    get:
      summary: Show Favorite Group
      tags:
        - favorites
      responses:
        '200':
          $ref: '#/components/responses/FavoriteGroup'
      operationId: getFavoriteGroup
      security:
        - apiKeyCookie: []
          authCookie: []
      description: Fetch information about a specific favorite group.
    put:
      summary: Update Favorite Group
      operationId: updateFavoriteGroup
      security:
        - apiKeyCookie: []
          authCookie: []
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                displayName:
                  type: string
                visibility:
                  $ref: ./components/schemas/FavoriteGroupVisibility.yaml
                tags:
                  type: array
                  description: Tags on FavoriteGroups are believed to do nothing.
                  items:
                    $ref: ./components/schemas/Tag.yaml
      tags:
        - favorites
      description: Update information about a specific favorite group.
    delete:
      summary: Clear Favorite Group
      operationId: clearFavoriteGroup
      security:
        - apiKeyCookie: []
          authCookie: []
      responses:
        '200':
          $ref: ./components/responses/FavoriteGroupClearedSuccess.yaml
      tags:
        - favorites
      description: Clear ALL contents of a specific favorite group.
  /avatars/favorites:
    get:
      summary: List Favorited Avatars
      tags:
        - avatars
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/MissingCredentials'
      operationId: getFavoritedAvatars
      security:
        - apiKeyCookie: []
          authCookie: []
      parameters:
        - $ref: '#/components/parameters/featured'
        - $ref: '#/components/parameters/sortOptions'
        - $ref: '#/components/parameters/number'
        - $ref: '#/components/parameters/orderOptions'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/tag'
        - $ref: '#/components/parameters/notag'
        - $ref: '#/components/parameters/releaseStatus'
        - $ref: '#/components/parameters/maxUnityVersion'
        - $ref: '#/components/parameters/minUnityVersion'
        - $ref: '#/components/parameters/platform'
        - $ref: '#/components/parameters/userIdAdmin'
      description: Search and list favorited avatars by query filters.
  /avatars:
    get:
      summary: Search Avatars
      tags:
        - avatars
      responses:
        '200':
          $ref: '#/components/responses/AvatarList'
        '401':
          $ref: '#/components/responses/MissingCredentials'
      operationId: searchAvatars
      security:
        - apiKeyCookie: []
          authCookie: []
      parameters:
        - $ref: '#/components/parameters/featured'
        - $ref: '#/components/parameters/sortOptions'
        - schema:
            type: string
            enum:
              - me
          in: query
          required: false
          name: user
          description: Set to `me` for searching own avatars.
        - $ref: '#/components/parameters/userIdQuery'
        - $ref: '#/components/parameters/number'
        - $ref: '#/components/parameters/orderOptions'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/tag'
        - $ref: '#/components/parameters/notag'
        - $ref: '#/components/parameters/releaseStatus'
        - $ref: '#/components/parameters/maxUnityVersion'
        - $ref: '#/components/parameters/minUnityVersion'
        - $ref: '#/components/parameters/platform'
      description: Search and list avatars by query filters. You can only search your own or featured avatars. It is not possible as a normal user to search other peoples avatars.
    post:
      summary: Create Avatar
      operationId: createAvatar
      security:
        - apiKeyCookie: []
          authCookie: []
      responses:
        '200':
          $ref: '#/components/responses/Avatar'
        '401':
          $ref: ./components/responses/FeaturedSetNotAdminError.yaml
      tags:
        - avatars
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                assetUrl:
                  type: string
                id:
                  $ref: ./components/schemas/AvatarID.yaml
                name:
                  type: string
                  minLength: 1
                description:
                  type: string
                  minLength: 1
                tags:
                  type: array
                  items:
                    $ref: ./components/schemas/Tag.yaml
                imageUrl:
                  type: string
                  minLength: 1
                releaseStatus:
                  $ref: ./components/schemas/ReleaseStatus.yaml
                version:
                  type: number
                  minimum: 0
                  default: 1
                featured:
                  type: boolean
                  x-internal: true
                  description: You cannot set featured tag if you are not an admin.
                unityPackageUrl:
                  type: string
              required:
                - name
                - imageUrl
      description: Create an avatar. It's possible to optionally specify a ID if you want a custom one. Attempting to create an Avatar with an already claimed ID will result in a DB error.
  '/avatars/{avatarId}':
    parameters:
      - $ref: '#/components/parameters/avatarId'
    get:
      summary: Get Avatar
      tags:
        - avatars
      responses:
        '200':
          $ref: '#/components/responses/Avatar'
        '401':
          $ref: '#/components/responses/MissingCredentials'
        '404':
          $ref: ./components/responses/AvatarNotFoundError.yaml
      operationId: getAvatar
      security:
        - apiKeyCookie: []
          authCookie: []
      description: Get information about a specific Avatar.
    put:
      summary: Update Avatar
      operationId: updateAvatar
      security:
        - apiKeyCookie: []
          authCookie: []
      responses:
        '200':
          $ref: '#/components/responses/Avatar'
        '401':
          $ref: '#/components/responses/MissingCredentials'
        '404':
          $ref: ./components/responses/AvatarNotFoundError.yaml
      description: Update information about a specific avatar.
      tags:
        - avatars
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                assetUrl:
                  type: string
                id:
                  $ref: ./components/schemas/AvatarID.yaml
                name:
                  type: string
                  minLength: 1
                description:
                  type: string
                  minLength: 1
                tags:
                  type: array
                  items:
                    $ref: ./components/schemas/Tag.yaml
                imageUrl:
                  type: string
                  minLength: 1
                releaseStatus:
                  $ref: ./components/schemas/ReleaseStatus.yaml
                version:
                  type: number
                  minimum: 0
                  default: 1
                featured:
                  type: boolean
                  x-internal: true
                  description: You cannot set featured tag if you are not an admin.
                unityPackageUrl:
                  type: string
    delete:
      summary: Delete Avatar
      operationId: deleteAvatar
      security:
        - apiKeyCookie: []
          authCookie: []
      responses:
        '200':
          $ref: '#/components/responses/Avatar'
        '401':
          $ref: '#/components/responses/MissingCredentials'
        '404':
          $ref: ./components/responses/AvatarNotFoundError.yaml
      tags:
        - avatars
      description: 'Delete an avatar. Notice an avatar is never fully "deleted", only its ReleaseStatus is set to "hidden" and the linked Files are deleted. The AvatarID is permanently reserved.'
  '/avatars/{avatarId}/select':
    parameters:
      - $ref: '#/components/parameters/avatarId'
    put:
      summary: Select Avatar
      tags:
        - avatars
      responses:
        '200':
          $ref: '#/components/responses/CurrentUser'
        '401':
          $ref: '#/components/responses/MissingCredentials'
        '404':
          $ref: ./components/responses/AvatarNotFoundError.yaml
      operationId: selectAvatar
      security:
        - apiKeyCookie: []
          authCookie: []
      description: Switches into that avatar.
components:
  schemas: {}
  securitySchemes:
    apiKeyQuery:
      name: apiKey
      type: apiKey
      in: query
      description: API Key via Query
    apiKeyCookie:
      name: apiKey
      type: apiKey
      in: cookie
      description: API Key via Cookie
    authHeader:
      type: http
      scheme: basic
      description: Auth token via Header
    authCookie:
      name: auth
      type: apiKey
      in: cookie
      description: Auth Token via Cookie
    twoFactorAuthCookie:
      name: twoFactorAuth
      type: apiKey
      in: cookie
      description: 2FA device remembrance via Cookie
  responses:
    MissingCredentials:
      description: Error response due to missing apiKey or auth cookie.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                $ref: ./components/schemas/Error.yaml
            required:
              - error
          examples:
            Missing Credentials Example:
              value:
                error:
                  message: '"Missing Credentials"'
                  status_code: 401
    InvalidAdminCredentials:
      description: Error response due to missing Administrator credentials.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                $ref: ./components/schemas/Error.yaml
            required:
              - error
          examples:
            Invalid Admin Credentials Example:
              value:
                error:
                  message: '"Invalid Admin Credentials"'
                  status_code: 403
    APIHealth:
      description: API's Health
      content:
        application/json:
          schema:
            type: object
            properties:
              ok:
                type: boolean
              serverName:
                type: string
                minLength: 1
              buildVersionTag:
                type: string
                minLength: 1
            required:
              - ok
              - serverName
              - buildVersionTag
          examples:
            Example Response:
              value:
                ok: true
                serverName: prod-api-green-marsh-dgt
                buildVersionTag: master-build-2021-06-24-fred-drakeshoot
    AcceptFriendRequestError:
      description: Error response when trying to accept a non-existent friend request.
      content:
        application/json:
          schema:
            $ref: ./components/schemas/Error.yaml
          examples:
            404 Accept Friend Request:
              value:
                error:
                  message: that friend request could not be found
                  status_code: 404
    DeleteFriendRequestError:
      description: Error response when trying to delete a non-existent friend-request.
      content:
        application/json:
          schema:
            $ref: ./components/schemas/Error.yaml
          examples:
            404 Delete Friend Request:
              value:
                error:
                  message: that friend request could not be found
                  status_code: 404
    NotFriendsError:
      description: Error response when trying to unfriend someone who is not a friend.
      content:
        application/json:
          schema:
            $ref: ./components/schemas/Error.yaml
          examples:
            400 Not Friends Response:
              value:
                error:
                  message: These users are not friends
                  status_code: 400
    UserDoesntExistError:
      description: Error response when trying to send a friend request to a user which doesn't exist.
      content:
        application/json:
          schema:
            $ref: ./components/schemas/Error.yaml
          examples:
            404 User Doesn't Exist Response:
              value:
                error:
                  message: user doesn't existǃ
                  status_code: 404
    ClearNotificationsSuccess:
      description: Successful response after clearing all notifications.
      content:
        application/json:
          schema:
            $ref: ./components/schemas/Success.yaml
          examples:
            Unfriend Success:
              value:
                success:
                  message: Ok
                  status_code: 200
    FriendSuccess:
      description: Successful response after friending a user.
      content:
        application/json:
          schema:
            $ref: ./components/schemas/Success.yaml
          examples:
            Unfriend Success:
              value:
                success:
                  message: Ok
                  status_code: 200
    UnfriendSuccess:
      description: Successful response after unfriending a user.
      content:
        application/json:
          schema:
            $ref: ./components/schemas/Success.yaml
          examples:
            Unfriend Success:
              value:
                success:
                  message: Friendship destroyed
                  status_code: 200
    DeleteFriendRequestSuccess:
      description: Successful response after cancelling a friend request.
      content:
        application/json:
          schema:
            $ref: ./components/schemas/Success.yaml
          examples:
            Deleted Friend Request:
              value:
                success:
                  message: Friendship request deleted
                  status_code: 200
    Notification:
      description: Returns a single Notifcation object.
      content:
        application/json:
          schema:
            $ref: ./components/schemas/Notification.yaml
          examples:
            Example Friend Request Response:
              value:
                id: frq_00000000-0000-0000-0000-000000000000
                senderUserId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                senderUsername: tupper
                type: friendRequest
                message: ''
                details: '{}'
                seen: false
                created_at: '2021-01-01T00:00:00.000Z'
    FriendStatus:
      description: Friend Status
      content:
        application/json:
          schema:
            type: object
            properties:
              isFriend:
                type: boolean
                default: false
              outgoingRequest:
                type: boolean
                default: false
              incomingRequest:
                type: boolean
                default: false
            required:
              - isFriend
              - outgoingRequest
              - incomingRequest
          examples:
            Example Response:
              value:
                isFriend: false
                outgoingRequest: false
                incomingRequest: false
    NotificationList:
      description: Returns a list of Notifcation objects.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: ./components/schemas/Notification.yaml
    FileList:
      description: Returns a list of File objects.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: ./components/schemas/File.yaml
    File:
      description: Returns a single File object.
      content:
        application/json:
          schema:
            $ref: ./components/schemas/File.yaml
          examples:
            Example Avatar File:
              value:
                id: file_00000000-0000-0000-0000-000000000000
                name: Avatar - Test Avatar - Unity package - 2017․4․28f1_3_standalonewindows_Release
                ownerId: usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469
                mimeType: application/gzip
                extension: .unitypackage
                tags: []
                versions:
                  - version: 0
                    status: complete
                    created_at: '2019-08-15T11:04:37.910Z'
                  - version: 1
                    status: complete
                    created_at: '2019-08-15T11:04:49.702Z'
                    file:
                      fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage
                      url: 'https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage'
                      md5: xxxxxxxxxxxxxxxxxxx==
                      sizeInBytes: 303055180
                      status: complete
                      category: multipart
                      uploadId: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                    delta:
                      fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.delta
                      url: 'https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.delta'
                      md5: ''
                      sizeInBytes: 0
                      status: none
                      category: queued
                      uploadId: ''
                    signature:
                      fileName: Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.signature
                      url: 'https://s3.us-east-1.amazonaws.com/files.vrchat.cloud/Avatar-Test-Avatar-Unity.file_00000000-0000-0000-0000-000000000000.1.unitypackage.signature'
                      md5: xxxxxxxxxxxxxxxx==
                      sizeInBytes: 532748
                      status: complete
                      category: simple
                      uploadId: ''
    FileDeletedSuccess:
      description: Successful response after deleting a File.
      content:
        application/json:
          schema:
            $ref: ./components/schemas/Success.yaml
          examples:
            File Deleted Success:
              value:
                success:
                  message: File deleted
                  status_code: 200
    FileDeletedError:
      description: Error response when trying to delete a non-existent file.
      content:
        application/json:
          schema:
            $ref: ./components/schemas/Error.yaml
          examples:
            File Deleted Error:
              value:
                error:
                  message: File 'file_ce35d830-e20a-4df0-a6d4-5aaef4508044' not found
                  status_code: 404
    FileNotFoundError:
      description: Error response when trying to show information about a non-existent file.
      content:
        application/json:
          schema:
            $ref: ./components/schemas/Error.yaml
          examples:
            404 File Not Found:
              value:
                error:
                  message: File 'file_ce35d830-e20a-4df0-a6d4-5aaef4508044' not found
                  status_code: 404
    FileVersionDeleteInitialError:
      description: Error response when trying to delete the initial version of a file. Delete the main File object instead.
      content:
        application/json:
          schema:
            $ref: ./components/schemas/Error.yaml
          examples:
            400 Delete Initial File Version:
              value:
                error:
                  message: Cannot delete the initial version of the file‚ just delete the entire file record․
                  status_code: 400
    FileVersionDeleteMiddleError:
      description: Error response when trying to delete any version of a file that is not hte last one.
      content:
        application/json:
          schema:
            $ref: ./components/schemas/Error.yaml
          examples:
            409/500 Delete Non-Last File Version:
              value:
                error:
                  message: 409 Cannot delete against anything but the latest version of this file˸ 1‚ 11
                  status_code: 500
    RawFile:
      description: Raw file
    FileVersionUploadInfo:
      description: 'Current FileVersion upload status. Contains the uploadId needed for uploading, as well as the already uploaded parts.'
      content:
        application/json:
          schema:
            type: object
            description: ''
            properties:
              uploadId:
                type: string
                minLength: 1
                example: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx_xxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxx_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx..xxxxxxxxxxxxxxxxxxxxxxx
                readOnly: true
              fileName:
                type: string
                minLength: 1
                example: Avatar-MyAvatar-Un.file_00000000-0000-0000-0000-000000000000.1.unitypackage
                readOnly: true
              nextPartNumber:
                type: number
                minimum: 0
                example: 0
                readOnly: true
              maxParts:
                type: number
                minimum: 1
                example: 1000
                readOnly: true
              parts:
                type: array
                minItems: 0
                items:
                  type: object
                  readOnly: true
                readOnly: true
              etags:
                type: array
                description: Unknown
                minItems: 0
                items:
                  type: object
                  readOnly: true
                readOnly: true
            required:
              - uploadId
              - fileName
              - nextPartNumber
              - maxParts
              - parts
              - etags
            readOnly: true
          examples:
            Example Access Key:
              value:
                uploadId: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx_xxxxxxxxxxxxxxxxxxxxxxxx.xxxxxxx_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx..xxxxxxxxxxxxxxxxxxxxxxx
                fileName: Avatar-MyAvatar-Un.file_00000000-0000-0000-0000-000000000000.1.unitypackage
                nextPartNumber: 0
                maxParts: 1000
                parts: []
                etags: []
    LimitedWorldList:
      description: Returns a list of LimitedWorld objects.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: ./components/schemas/LimitedWorld.yaml
    World:
      description: Returns a single World object.
      content:
        application/json:
          schema:
            $ref: ./components/schemas/World.yaml
    Instance:
      description: Returns a single Instance object.
      content:
        application/json:
          schema:
            $ref: ./components/schemas/Instance.yaml
    Favorite:
      description: Returns a single Favorite object.
      content:
        application/json:
          schema:
            $ref: ./components/schemas/Favorite.yaml
    FavoriteList:
      description: Returns a list of Favorite objects.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: ./components/schemas/Favorite.yaml
    FavoriteGroup:
      description: Returns a single FavoriteGroup object.
      content:
        application/json:
          schema:
            $ref: ./components/schemas/FavoriteGroup.yaml
    FavoriteGroupList:
      description: Returns a list of FavoriteGroup objects.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: ./components/schemas/FavoriteGroup.yaml
    AvatarList:
      description: Returns a list of Avatar objects.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: ./components/schemas/Avatar.yaml
    Avatar:
      description: Returns a single Avatar object.
      content:
        application/json:
          schema:
            $ref: ./components/schemas/Avatar.yaml
    CurrentUser:
      description: Returns a single CurrentUser object.
      content:
        application/json:
          schema:
            $ref: ./components/schemas/CurrentUser.yaml
  examples: {}
  parameters:
    number:
      name: 'n'
      in: query
      required: false
      schema:
        type: integer
        maximum: 100
        minimum: 1
        default: 60
      description: The number of objects to return.
    offset:
      name: offset
      in: query
      required: false
      schema:
        type: integer
        minimum: 0
      description: A zero-based offset from the default object sorting from where search results start.
    sortOptions:
      name: sort
      in: query
      required: false
      schema:
        title: SortOptions
        type: string
        default: popularity
        enum:
          - popularity
          - heat
          - trust
          - shuffle
          - random
          - favorites
          - reportScore
          - reportCount
          - publicationDate
          - labsPublicationDate
          - created
          - _created_at
          - updated
          - _updated_at
          - order
          - relevance
          - magic
          - name
        example: popularity
        description: How to sort
    orderOptions:
      name: order
      in: query
      required: false
      schema:
        title: OrderOptions
        type: string
        default: descending
        enum:
          - ascending
          - descending
        example: descending
        description: Result ordering
    releaseStatus:
      name: releaseStatus
      in: query
      required: false
      schema:
        type: string
        default: hidden
        enum:
          - public
          - private
          - hidden
        example: hidden
      description: Filter by ReleaseStatus.
    offline:
      name: offline
      in: query
      required: false
      schema:
        type: boolean
      description: 'Returns *only* offline users if true, returns only online and active users if false'
    fileId:
      name: fileId
      in: path
      required: true
      schema:
        type: string
        example: file_00000000-0000-0000-0000-000000000000
        pattern: 'file_[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}'
    versionId:
      name: versionId
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
        example: 1
    fileType:
      name: fileType
      in: path
      required: true
      schema:
        type: string
        enum:
          - file
          - signature
          - delta
        example: file
    userId:
      name: userId
      in: path
      required: true
      schema:
        type: string
    maxUnityVersion:
      name: maxUnityVersion
      in: query
      required: false
      schema:
        type: string
      description: The maximum Unity version supported by the asset.
    minUnityVersion:
      name: minUnityVersion
      in: query
      required: false
      schema:
        type: string
      description: The minimum Unity version supported by the asset.
    platform:
      name: platform
      in: query
      required: false
      schema:
        type: string
      description: The platform the asset supports.
    tag:
      name: tag
      in: query
      required: false
      schema:
        type: string
      description: Tags to include (comma-separated).
    notag:
      name: notag
      in: query
      required: false
      schema:
        type: string
      description: Tags to exclude (comma-separated).
    search:
      name: search
      in: query
      required: false
      schema:
        type: string
      description: Filters by world name.
    userIdQuery:
      name: userId
      in: query
      required: false
      schema:
        type: string
      description: Filter by author UserID
    featured:
      name: featured
      in: query
      required: false
      schema:
        type: string
      description: Filters on featured results.
    userIdAdmin:
      name: userId
      in: query
      required: false
      schema:
        type: string
      description: 'Target user to see information on, admin-only.'
    worldId:
      name: worldId
      in: path
      required: true
      schema:
        type: string
    instanceId:
      name: instanceId
      in: path
      required: true
      schema:
        type: string
    favoriteId:
      name: favoriteId
      in: path
      required: true
      schema:
        type: string
    favoriteGroupType:
      name: favoriteGroupType
      in: path
      required: true
      schema:
        type: string
        enum:
          - world
          - friend
          - avatar
      description: 'The type of group to fetch, must be a valid FavoriteType.'
    favoriteGroupName:
      name: favoriteGroupName
      in: path
      required: true
      schema:
        type: string
    avatarId:
      name: avatarId
      in: path
      required: true
      schema:
        type: string
tags:
  - name: authentication
  - name: avatars
  - name: favorites
  - name: files
  - name: friends
  - name: notifications
  - name: system
  - name: users
  - name: worlds
