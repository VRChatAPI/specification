openapi: 3.0.3
info:
  title: playermoderation
  version: '1.0'
  description: |-
    There are two different moderation API's, "moderation" for Staff actions, and "playermoderation" for players.
    PlayerModerations are user-generated actions towards others, such as muting them, blocking, or toggling interaction.

    Your global permission settings are stored locally on your computer.
    Only player-specific moderations (when you target a player, and allow them specifically to interact with you) are stored in the API.

    ## Implementation details

    There are three different user-targetted permission options:

    - Mode 1: interactOn/unmute/unblock
    - Mode 2: interactOff/mute/block
    - *Default setting*

    **Example:**
    
    Force On (`interactOn`) and Force Off (`interactOff`) always or never allow that person to interact with you.
    These are stored as PlayerModerations. When you select a player and select "Force On", it creates a playerModeration of type `interactOn`.

    **Important order:**

    1. When switching between one mode from the other, e.g. "Force On" and "Force Off", **the previous playerModeration MUST first be deleted before creating the second.**
       The game sends these in sequence, first delete the old, then create the new. Attempting to create both `interactOn` and `interactOff` is UNDOCUMENTED behavior.
    2. "Use Current Setting" **does not have it's own enum**. The game removes any previous playerModeration of same type.
       No playerModeration of either type means fallback to the global setting.

    ## Deprecation notice

    As of October 2022, `showAvatar` and `hideAvatar` has been moved to local storage.
    Sending these types to the API will result in a 200 OK response, but the API will **not** store them.
    More information is avaiable on VRChat's official [documentation on Local Storage](https://docs.vrchat.com/docs/local-vrchat-storage).
paths:
  /auth/user/playermoderations:
    get:
      summary: Search Player Moderations
      tags:
        - playermoderation
      x-codeSamples:
        $ref: "../codeSamples/playermoderation.yaml#/~1auth~1user~1playermoderations/get"
      responses:
        '200':
          $ref: ../responses/playermoderation/PlayerModerationListResponse.yaml
        '401':
          $ref: ../responses/MissingCredentialsError.yaml
      operationId: getPlayerModerations
      security:
        - authCookie: []
      parameters:
        - schema:
            type: string
          in: query
          name: type
          description: 'Must be one of PlayerModerationType, except unblock. Unblocking simply removes a block.'
        - schema:
            type: string
          in: query
          name: sourceUserId
          description: Must be valid UserID. Trying to view someone else's moderations results with "Can't view someone else's player moderations" error.
          x-internal: true
        - schema:
            type: string
          in: query
          name: targetUserId
          description: Must be valid UserID.
      description: |-
        Returns a list of all player moderations made by **you**.

        This endpoint does not have pagination, and will return *all* results. Use query parameters to limit your query if needed.
    post:
      summary: Moderate User
      operationId: moderateUser
      security:
        - authCookie: []
      x-codeSamples:
        $ref: "../codeSamples/playermoderation.yaml#/~1auth~1user~1playermoderations/post"
      responses:
        '200':
          $ref: ../responses/playermoderation/PlayerModerationResponse.yaml
        '401':
          $ref: ../responses/MissingCredentialsError.yaml
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: ../requests/ModerateUserRequest.yaml
        description: ''
      description: |-
        Moderate a user, e.g. unmute them or show their avatar.

        Please see the [Player Moderation docs](https://vrchatapi.github.io/docs/api/#tag--playermoderation) on what playerModerations are, and how they differ from staff moderations.
      tags:
        - playermoderation
    delete:
      summary: Clear All Player Moderations
      operationId: clearAllPlayerModerations
      security:
        - authCookie: []
      x-codeSamples:
        $ref: "../codeSamples/playermoderation.yaml#/~1auth~1user~1playermoderations/delete"
      responses:
        '200':
          $ref: ../responses/playermoderation/PlayerModerationClearAllSuccess.yaml
        '401':
          $ref: ../responses/MissingCredentialsError.yaml
      description: ⚠️ **This will delete every single player moderation you've ever made.**
      tags:
        - playermoderation
  /auth/user/unplayermoderate:
    put:
      summary: Unmoderate User
      operationId: unmoderateUser
      security:
        - authCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: ../requests/ModerateUserRequest.yaml
      description: 'Removes a player moderation previously added through `moderateUser`. E.g if you previously have shown their avatar, but now want to reset it to default.'
      x-codeSamples:
        $ref: "../codeSamples/playermoderation.yaml#/~1auth~1user~1unplayermoderate/put"
      responses:
        '200':
          $ref: ../responses/playermoderation/PlayerModerationUnmoderatedSuccess.yaml
        '401':
          $ref: ../responses/MissingCredentialsError.yaml
      tags:
        - playermoderation
  '/auth/user/playermoderations/{playerModerationId}':
    parameters:
      - schema:
          type: string
        name: playerModerationId
        in: path
        required: true
        description: 'Must be a valid `pmod_` ID.'
    get:
      summary: Get Player Moderation
      tags:
        - playermoderation
      x-codeSamples:
        $ref: "../codeSamples/playermoderation.yaml#/~1auth~1user~1playermoderations~1{playerModerationId}/get"
      responses:
        '200':
          $ref: ../responses/playermoderation/PlayerModerationResponse.yaml
        '401':
          $ref: ../responses/MissingCredentialsError.yaml
        '404':
          $ref: ../responses/playermoderation/PlayerModerationNotFoundError.yaml
      operationId: getPlayerModeration
      security:
        - authCookie: []
      description: Returns a single Player Moderation. This returns the exact same amount of information as the more generalised `getPlayerModerations`.
    delete:
      summary: Delete Player Moderation
      operationId: deletePlayerModeration
      security:
        - authCookie: []
      x-codeSamples:
        $ref: "../codeSamples/playermoderation.yaml#/~1auth~1user~1playermoderations~1{playerModerationId}/delete"
      responses:
        '200':
          $ref: ../responses/playermoderation/PlayerModerationRemovedSuccess.yaml
        '401':
          $ref: ../responses/MissingCredentialsError.yaml
        '403':
          $ref: ../responses/playermoderation/PlayerModerationDeleteOthersError.yaml
      description: Deletes a specific player moderation based on it's `pmod_` ID. The website uses `unmoderateUser` instead. You can delete the same player moderation multiple times successfully.
      tags:
        - playermoderation
tags:
  $ref: ../tags.yaml
components:
  securitySchemes:
    $ref: ../securitySchemes.yaml
