openapi: 3.0.3
info:
  title: playermoderation
  version: '1.0'
  description: |-
    There are two different moderation API's, "moderation" for Staff actions, and "playermoderation" for players. PlayerModerations are user-generated actions towards others, such as muting them, blocking, or hiding their avatar.

    Player moderations are also used for other things, such as in the Avatar Dynamics Interaction system.
    Permissions which affect globally are stored in a Registry key locally on your computer, but player-specific moderations (when you target a player, and allow them specifically to interact with you) is stored in the API.

    There are three different user-targetted permission options:

    - Force On
    - Force Off
    - User Current Setting

    Force On a.k.a `interactOn` and Force Off `interactOff` always or never allow that person to interact with you. These are stored as PlayerModerations. When you select a player and select "Force On", it creates a playerModeration of type `interactOn`.

    ## Two important implementation details:

    1. When switching between "Force On" and "Force Off", **the previous playerModeration MUST first be deleted before creating the second one.** The game sends these in sequence, first delete the old, then create the new. Attempting to create both `interactOn` and `interactOff` is UNDOCUMENTED behavior.
    2. "Use Current Setting" **does not have it's own type**. It simply removes the previous playerModeration. No playerModeration of either type means fallback to the global setting.
paths:
  /auth/user/playermoderations:
    get:
      summary: Search Player Moderations
      tags:
        - playermoderation
      x-codeSamples:
        $ref: "../codeSamples/playermoderation.yaml#/~1auth~1user~1playermoderations/get"
      responses:
        '200':
          $ref: ../responses/playermoderation/PlayerModerationListResponse.yaml
        '401':
          $ref: ../responses/MissingCredentialsError.yaml
      operationId: getPlayerModerations
      security:
        - apiKeyCookie: []
          authCookie: []
      parameters:
        - schema:
            type: string
          in: query
          name: type
          description: 'Must be one of PlayerModerationType, except unblock. Unblocking simply removes a block.'
        - schema:
            type: string
          in: query
          name: sourceUserId
          description: Must be valid UserID. Trying to view someone else's moderations results with "Can't view someone else's player moderations" error.
          x-internal: true
        - schema:
            type: string
          in: query
          name: targetUserId
          description: Must be valid UserID.
      description: |-
        Returns a list of all player moderations made by **you**.

        This endpoint does not have pagination, and will return *all* results. Use query parameters to limit your query if needed.
    post:
      summary: Moderate User
      operationId: moderateUser
      security:
        - apiKeyCookie: []
          authCookie: []
      x-codeSamples:
        $ref: "../codeSamples/playermoderation.yaml#/~1auth~1user~1playermoderations/post"
      responses:
        '200':
          $ref: ../responses/playermoderation/PlayerModerationResponse.yaml
        '401':
          $ref: ../responses/MissingCredentialsError.yaml
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../requests/ModerateUserRequest.yaml
        description: ''
      description: |-
        Moderate a user, e.g. unmute them or show their avatar.

        Please see the [Player Moderation docs](https://vrchatapi.github.io/docs/api/#tag--playermoderation) on what playerModerations are, and how they differ from staff moderations.
      tags:
        - playermoderation
    delete:
      summary: Clear All Player Moderations
      operationId: clearAllPlayerModerations
      security:
        - apiKeyCookie: []
          authCookie: []
      x-codeSamples:
        $ref: "../codeSamples/playermoderation.yaml#/~1auth~1user~1playermoderations/delete"
      responses:
        '200':
          $ref: ../responses/playermoderation/PlayerModerationClearAllSuccess.yaml
        '401':
          $ref: ../responses/MissingCredentialsError.yaml
      description: ⚠️ **This will delete every single player moderation you've ever made.**
      tags:
        - playermoderation
  /auth/user/unplayermoderate:
    put:
      summary: Unmoderate User
      operationId: unmoderateUser
      security:
        - apiKeyCookie: []
          authCookie: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../requests/ModerateUserRequest.yaml
      description: 'Removes a player moderation previously added through `moderateUser`. E.g if you previously have shown their avatar, but now want to reset it to default.'
      x-codeSamples:
        $ref: "../codeSamples/playermoderation.yaml#/~1auth~1user~1unplayermoderate/put"
      responses:
        '200':
          $ref: ../responses/playermoderation/PlayerModerationUnmoderatedSuccess.yaml
        '401':
          $ref: ../responses/MissingCredentialsError.yaml
      tags:
        - playermoderation
  '/auth/user/playermoderations/{playerModerationId}':
    get:
      summary: Get Player Moderation
      tags:
        - playermoderation
      x-codeSamples:
        $ref: "../codeSamples/playermoderation.yaml#/~1auth~1user~1playermoderations~1{playerModerationId}/get"
      responses:
        '200':
          $ref: ../responses/playermoderation/PlayerModerationResponse.yaml
        '401':
          $ref: ../responses/MissingCredentialsError.yaml
        '404':
          $ref: ../responses/playermoderation/PlayerModerationNotFoundError.yaml
      operationId: getPlayerModeration
      security:
        - apiKeyCookie: []
          authCookie: []
      description: Returns a single Player Moderation. This returns the exact same amount of information as the more generalised `getPlayerModerations`.
    delete:
      summary: Delete Player Moderation
      operationId: deletePlayerModeration
      security:
        - apiKeyCookie: []
          authCookie: []
      x-codeSamples:
        $ref: "../codeSamples/playermoderation.yaml#/~1auth~1user~1playermoderations~1{playerModerationId}/delete"
      responses:
        '200':
          $ref: ../responses/playermoderation/PlayerModerationRemovedSuccess.yaml
        '401':
          $ref: ../responses/MissingCredentialsError.yaml
        '403':
          $ref: ../responses/playermoderation/PlayerModerationDeleteOthersError.yaml
      description: Deletes a specific player moderation based on it's `pmod_` ID. The website uses `unmoderateUser` instead. You can delete the same player moderation multiple times successfully.
      tags:
        - playermoderation
    parameters:
      - schema:
          type: string
        name: playerModerationId
        in: path
        required: true
tags:
  $ref: ../tags.yaml
components:
  securitySchemes:
    $ref: ../securitySchemes.yaml
